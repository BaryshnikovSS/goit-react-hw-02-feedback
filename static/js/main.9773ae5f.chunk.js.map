{"version":3,"sources":["Components/section/Section.js","Components/feedbackOptions/FeedbackOptions.js","Components/notification/Notification.js","Components/statistics/Statistics.js","Components/App.js","index.js"],"names":["Section","title","children","css","backgroundColor","border","borderRadius","height","margin","FeedbackOptions","options","onLeaveFeedback","Object","keys","map","el","style","key","type","name","onClick","charAt","toUpperCase","slice","Notification","message","Statistics","good","neutral","bad","total","positivePercentage","listStyle","paddingLeft","App","state","handleClick","e","preventDefault","target","setState","prevState","countTotalFeedback","countPositiveFeedbackPercentage","Math","round","this","Component","ReactDOM","render","document","getElementById"],"mappings":"kOASeA,EAPC,SAAC,GAAD,IAAEC,EAAF,EAAEA,MAAOC,EAAT,EAASA,SAAT,OACd,oCACE,4BAAKD,GACJC,ICHCC,EAAM,CACVC,gBAAiB,UACjBC,OAAQ,uCACRC,aAAc,MACdC,OAAQ,OACRC,OAAQ,OAuBKC,EApBS,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBAClC,OACE,oCACGC,OAAOC,KAAKH,GAASI,KAAI,SAAAC,GACxB,OACE,4BACEC,MAAOb,EACPc,IAAKF,EACLG,KAAK,SACLC,KAAMJ,EACNK,QAAST,GAERI,EAAGM,OAAO,GAAGC,cAAgBP,EAAGQ,MAAM,SCnBpCC,EADM,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OAAiB,+BAAKA,ICqB5BC,EAjBI,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC/C,OAAc,IAAVD,EACK,kBAAC,EAAD,CAAcL,QAAS,sBAG9B,oCACE,wBAAIT,MAAO,CAACgB,UAAW,OAAQC,YAAa,IAC1C,qCAAWN,GACX,wCAAcC,GACd,oCAAUC,GACV,sCAAYC,GACZ,kDAAwBC,GAAsB,EAA9C,SCOJD,EAAQ,EA6CGI,E,2MA1CbC,MAAQ,CAAER,KAAM,EAAGC,QAAS,EAAGC,IAAK,G,EACpCO,YAAc,SAAAC,GACZA,EAAEC,iBACF,IAAMnB,EAAOkB,EAAEE,OAAOpB,KACtB,EAAKqB,UAAS,SAAAC,GAAS,sBACpBtB,EAAOsB,EAAUtB,GAAQ,O,EAI9BuB,mBAAqB,WAAO,IAAD,EACM,EAAKP,MAA5BR,EADiB,EACjBA,KAAMC,EADW,EACXA,QAASC,EADE,EACFA,IACvB,OAAQC,EAAQH,EAAOC,EAAUC,G,EAGnCc,gCAAkC,WAChC,OAAOC,KAAKC,MAAyB,IAAlB,EAAKV,MAAMR,KAAcG,I,wEAGpC,IAAD,EACwBgB,KAAKX,MAA5BR,EADD,EACCA,KAAMC,EADP,EACOA,QAASC,EADhB,EACgBA,IACvB,OACE,oCACE,kBAAC,EAAD,CAAS5B,MAAO,yBACd,kBAAC,EAAD,CACES,QAASoC,KAAKX,MACdxB,gBAAiBmC,KAAKV,eAG1B,kBAAC,EAAD,CAASnC,MAAO,cACd,kBAAC,EAAD,CACE0B,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOgB,KAAKJ,qBACZX,mBAAoBe,KAAKH,0C,GAnCnBI,aCtBlBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.9773ae5f.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Section = ({title, children}) => (\r\n  <>\r\n    <h2>{title}</h2>\r\n    {children}\r\n  </>\r\n);\r\n\r\nexport default Section;\r\n","import React from \"react\";\r\n\r\nconst css = {\r\n  backgroundColor: \"#ffffff\",\r\n  border: \"1px solid rgba(146, 144, 144, 0.564)\",\r\n  borderRadius: \"4px\",\r\n  height: \"20px\",\r\n  margin: \"2px\"\r\n};\r\n\r\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\r\n  return (\r\n    <>\r\n      {Object.keys(options).map(el => {\r\n        return (\r\n          <button\r\n            style={css}\r\n            key={el}\r\n            type=\"button\"\r\n            name={el}\r\n            onClick={onLeaveFeedback}\r\n          >\r\n            {el.charAt(0).toUpperCase() + el.slice(1)}\r\n          </button>\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default FeedbackOptions;\r\n","import React from \"react\";\r\n\r\nconst Notification = ({ message }) => <p> {message}</p>;\r\nexport default Notification;\r\n","import React from \"react\";\r\nimport Notification from '../notification/Notification';\r\n\r\n// Расширь функционал приложения так, чтобы блок статистики рендерился только после того, как был собран хотя бы один отзыв. \r\n// Сообщение об отсутствиии статистики вынеси в компонент <Notification message=\"No feedback given\">.\r\n\r\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => {\r\n  if (total === 0) {\r\n    return <Notification message={\"No feedback given\"}/>;\r\n  }\r\n  return (\r\n    <>\r\n      <ul style={{listStyle: \"none\", paddingLeft: 0}}>\r\n        <li>Good: {good}</li>\r\n        <li>Neutral: {neutral}</li>\r\n        <li>Bad: {bad}</li>\r\n        <li>Total: {total}</li>\r\n        <li>Positive feedback: {positivePercentage || 0} %</li>\r\n      </ul>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Statistics;\r\n","import React, { Component } from \"react\";\nimport Section from \"./section/Section\";\nimport FeedbackOptions from \"./feedbackOptions/FeedbackOptions\";\nimport Statistics from \"./statistics/Statistics\";\n\n// Выполни рефакторинг приложения. Состояние приложения должно оставаться в корневом компоненте <App>.\n\n// Состояние приложения обязательно должно быть следующего вида, добавлять новые свойства нельзя.\n\n// state = {\n//   good: 0,\n//   neutral: 0,\n//   bad: 0\n// };\n\n// Добавь отображение общего количества собранных отзывов из всех категорий и процент положительных отзывов.\n// Для этого создай вспомогательные методы countTotalFeedback() и countPositiveFeedbackPercentage(), подсчитывающие эти значения\n// основываясь на данных в состоянии (вычисляемые данные).\n\n// Вынеси отображение статистики в отдельный компонент <Statistics good={} neutral={} bad={} total={} positivePercentage={}/>.\n// Вынеси блок кнопок в компонент <FeedbackOptions options={} onLeaveFeedback={}>.\n// Создай компонент <Section title=\"\"/>, который рендерит секцию с заголовком и детей (children).\n// Оберни каждый из <Statistics> и <FeedbackOptions> в созданный компонент секции.\n\nlet total = 0;\n\nclass App extends Component {\n  state = { good: 0, neutral: 0, bad: 0 };\n  handleClick = e => {\n    e.preventDefault();\n    const name = e.target.name;\n    this.setState(prevState => ({\n      [name]: prevState[name] + 1\n    }));\n  };\n\n  countTotalFeedback = () => {\n    const { good, neutral, bad } = this.state;\n    return (total = good + neutral + bad);\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    return Math.round((this.state.good * 100) / total);\n  };\n\n  render() {\n    const { good, neutral, bad } = this.state;\n    return (\n      <>\n        <Section title={\"Please leave feedback\"}>\n          <FeedbackOptions\n            options={this.state}\n            onLeaveFeedback={this.handleClick}\n          />\n        </Section>\n        <Section title={\"Statistics\"}>\n          <Statistics\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            total={this.countTotalFeedback()}\n            positivePercentage={this.countPositiveFeedbackPercentage()}\n          />\n        </Section>\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './Components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}